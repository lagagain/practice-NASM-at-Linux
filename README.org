# -*- org-export-babel-evaluate: nil; -*-
#+title: 又LAG在Linux上的x86組合語言練習(使用NASM)
#+author: lagagain(LAG)
#+date: <2019-09-23 一 05:22>
#+export_file_name: docs/index
#+options: toc:nil


* 說明
  這是我的 NASM 組合語言練習筆記。我是根據[[https://www.youtube.com/watch?v=wLXIWKUWpSs&list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe][{YouTube}Intro to x86 Assembly Language]]進行學習。筆記下多數程式碼是該影片的範例修改而來。
  原始程式碼倉庫：https://github.com/code-tutorials/assembly-intro
* 建置(Build)&執行(Exec)
  建置以前你需要先將本範例中的程式碼 =tangle= 出去。

  #+begin_src elisp :results list
    (sort (org-babel-tangle) 'string<)
  #+end_src

  #+RESULTS:
  - src/add42.asm
  - src/add42.h
  - src/ex1.asm
  - src/ex10.asm
  - src/ex11.c
  - src/ex2.asm
  - src/ex3.asm
  - src/ex4.asm
  - src/ex5.asm
  - src/ex6.asm
  - src/ex7-1.asm
  - src/ex7-2.asm
  - src/ex8.asm
  - src/ex9.asm
  - src/hello.asm


  接著建置：
  #+begin_src bash
  make
  #+end_src

  所有目的執行程式都會在 =build= 目錄下。你可以參考本筆記內容執行程式，或是在 Emacs org-mode 下執行本筆記。

  #+begin_comment
  不知道 Jupyter-Notebooke 能不能寫的像 Org-mode 這麼靈活 0.0
  #+end_comment

** 清除(Clean)
   #+begin_src bash
   make clean
   #+end_src

* Linux 系統呼叫
- [[https://syscalls.kernelgrok.com/][Linux Syscall Reference]]
- [[https://shapeshed.com/unix-exit-codes/][Linux and Unix exit code tutorial with examples]]
- [[https://linux.incomeself.com/linux%25E7%25B3%25BB%25E7%25B5%25B1%25E5%2591%25BC%25E5%258F%25AB%25EF%25BC%2588system-call%25EF%25BC%2589%25E5%2587%25BD%25E5%25BC%258F%25E5%25A2%259E%25E5%258A%25A0%25E7%25AF%2587%25E3%2580%258E%25E7%25B8%25BD%25E6%2595%25B4%25E7%2590%2586%25E3%2580%258F/][Linux系統呼叫（System call）函式增加篇『總整理』]]
- [[https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/][Linux System Call Table for x86 64]]


系統呼叫表原始碼位置： =/usr/src/linux-headers-4.4.0-98-generic/arch/x86/include/generated/uapi/asm/unistd_64.h=
#+begin_comment
檔案可能是：
- unistd_64.h
- unistd_32.h
- unistd_x32.h
- unistd.h
#+end_comment

* Hello World
  程式碼：
#+name: hello.asm
#+begin_src asm :tangle src/hello.asm :mkdirp yes
section     .text
global      _start                              ;must be declared for linker (ld)

_start:                                                 ;tell linker entry point

        mov     edx,len                             ;message length
        mov     ecx,        msg                     ;message to write
        mov     ebx,1                               ;file descriptor (stdout)
        mov     eax,4                               ;system call number (sys_write)
        int     0x80                                ;call kernel

        mov     eax,1                               ;system call number (sys_exit)
        int     0x80                                ;call kernel


section     .data

        msg     db  'Hello, world!',0xa                 ;our dear string
        len      equ $ - msg                             ;length of our dear string
#+end_src

編譯：
#+name: compile_hello.asm
#+begin_src bash :dir src/ :results none
nasm -f elf64 hello.asm -o hello.o
ld -m elf_x86_64 hello.o -o hello
#+end_src

執行：
#+name: exec_hello
#+begin_src bash :dir src/ :session exec_asm :results output :async
./hello
#+end_src

#+RESULTS: exec_hello
: Hello, world!

* Example1
#+name: ex1.asm
#+begin_src asm :tangle src/ex1.asm :mkdirp yes
        global _start

_start:
        mov eax, 1
        mov ebx, 42
        sub ebx, 29
        int 0x80                ;eax:1 -> terminal print; ebx:status
#+end_src

#+name: compile_ex1.asm
#+begin_src bash :dir src/ :results none
nasm -f elf64 ex1.asm -o ex1.o
ld -m elf_x86_64 ex1.o -o ex1
#+end_src

#+name: exec_ex1
#+begin_src bash :dir src/ :session exec_asm :results output :async
./ex1
echo $?
#+end_src

#+RESULTS: exec_ex1
:
: 13


* Example2
#+name: ex2.asm
#+begin_src asm :tangle src/ex2.asm :mkdirp yes
        global _start

section .data
        msg db "Hello, World!", 0x0a
        len equ $ - msg

section .text

_start:
        mov eax, 4              ; sys_write system call
        mov ebx, 1              ; stdout file descriptor
        mov ecx, msg            ; byte to write
        mov edx, len            ; number of bytes to write
        int 0x80                ; perform system call

        ;; exit program
        mov eax, 1
        mov ebx, 0
        int 0x80
#+end_src

#+name: compile_ex2.asm
#+begin_src bash :dir src/ :results none
nasm -f elf64 ex2.asm -o ex2.o
ld -m elf_x86_64 ex2.o -o ex2
#+end_src

#+name: exec_ex2
#+begin_src bash :dir src/ :session exec_asm :results output :async
./ex2
#+end_src

#+RESULTS: exec_ex2
: Hello, World!

* Example3
#+name: ex3.asm
#+begin_src asm :tangle src/ex3.asm :mkdirp yes
;;;  about jump
;;; je A,B ; jump if Equal
;;; jne A, B; jump if Not Equal
;;; jg A, B ; jump if Greater
;;; jge A, B; jump if Grater or Equal
;;; jl A, B ; jump if Less
;;; jle A, B ; jump if Less or Equal

        global _start
        section .text
_start:
        mov ecx, 101             ; set exc to 99
        mov ebx, 42             ; exit status is 42
        mov eax, 1              ; sys_exit system call
        cmp ecx, 100            ; compare ecx to 100
        jl skip                 ; jump if less then
        mov ebx, 13             ; exit status is 13
skip:
        int 0x80
#+end_src

#+name: compile_ex3.asm
#+begin_src bash :dir src/ :results none
nasm -f elf64 ex3.asm -o ex3.o
ld -m elf_x86_64 ex3.o -o ex3
#+end_src

#+name: exec_ex3
#+begin_src bash :dir src/ :session exec_asm :results output :async
./ex3
echo $?
#+end_src

#+RESULTS: exec_ex3
:
: 13

* Example4
#+name: ex4.asm
#+begin_src asm :tangle src/ex4.asm :mkdirp yes
        global _start
        section .text
_start:
        mov ebx, 1              ;start ebx at 1
        mov ecx, 6              ; number of iterations
label:
        add ebx, ebx            ; ebx += ebx
        dec ecx                 ; ecx -= 1 ; inc => +1
        cmp ecx, 0              ; compare ecx with 0
        jg label                ; jump to label if greater
        mov eax, 1              ; sys_exit system call
        int 0x80
#+end_src

#+name: compile_ex4.asm
#+begin_src bash :dir src/ :results none
nasm -f elf64 ex4.asm -o ex4.o
ld -m elf_x86_64 ex4.o -o ex4
#+end_src

#+name: exec_ex4
#+begin_src bash :dir src/ :session exec_asm :results output :async
./ex4
echo $?
#+end_src

#+RESULTS: exec_ex4
:
: 64

* Example5

#+name: ex5.asm
#+begin_src asm :tangle src/ex5.asm :mkdirp yes
  global _start

  section .data
      addr db "yellow"

  section .text
  _start:
      mov [addr], byte 'H'
      mov [addr+5], byte '!'
      mov eax, 4    ; sys_write system call
      mov ebx, 1    ; stdout file descriptor
      mov ecx, addr ; bytes to write
      mov edx, 6    ; number of bytes to write
      int 0x80      ; perform system call
      mov eax, 1    ; sys_exit system call
      mov ebx, 0    ; exit status is 0
      int 0x80
#+end_src

#+name: compile_ex5.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex5.asm -o ex5.o
        ld -m elf_i386 ex5.o -o ex5
#+end_src

#+name: exec_ex5
#+begin_src bash :dir src/ :results output
./ex5
#+end_src

#+RESULTS: exec_ex5
: Hello!

* Example6

#+name: ex6.asm
#+begin_src asm :tangle src/ex6.asm :mkdirp yes
global _start

_start:
    sub esp, 4
    mov [esp], byte 'H'
    mov [esp+1], byte 'e'
    mov [esp+2], byte 'y'
    mov [esp+3], byte '!'
    mov eax, 4    ; sys_write system call
    mov ebx, 1    ; stdout file descriptor
    mov ecx, esp  ; bytes to write
    mov edx, 4    ; number of bytes to write
    int 0x80      ; perform system call
    mov eax, 1    ; sys_exit system call
    mov ebx, 0    ; exit status is 0
    int 0x80
#+end_src

#+name: compile_ex6.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex6.asm -o ex6.o
        ld -m elf_i386 ex6.o -o ex6
#+end_src

#+name: exec_ex6
#+begin_src bash :dir src/ :results output
./ex6
#+end_src

#+RESULTS: exec_ex6
: Hey!

* Example7
#+name: ex7-1.asm
#+begin_src asm -n -r :tangle src/ex7-1.asm :mkdirp yes
  global _start

  _start:
      call func
      mov eax, 1                  ;(ref:ex7-1 32bit register)
      int 0x80

  func:
      mov ebx, 42
      pop eax                     ;(ref:ex7-1 pop eax)
      jmp eax                     ;(ref:ex7-1 jmp eax)
#+end_src

32 bit 的暫存器用 eax 命名，64 bits 的叫 rax(第[[(ex7-1 32bit register)]]行)。

第[[(ex7-1 pop eax)]]-[[(ex7-1 jmp eax)]]行 同樣可以表示為 =ret= ，見下方 ex7-2
#+name: compile_ex7-1.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex7-1.asm -o ex7-1.o
        ld -m elf_i386 ex7-1.o -o ex7-1
#+end_src

#+name: exec_ex7-1
#+begin_src bash :dir src/ :results output
./ex7-1
echo $?
#+end_src

#+RESULTS: exec_ex7-1
: 42

--------------------

#+name: ex7-2.asm
#+begin_src asm :tangle src/ex7-2.asm :mkdirp yes
global _start

_start:
    call func
    mov eax, 1
    int 0x80

func:
    mov ebx, 42
    ret
#+end_src

#+name: compile_ex7-2.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex7-2.asm -o ex7-2.o
        ld -m elf_i386 ex7-2.o -o ex7-2
#+end_src

#+name: exec_ex7-2
#+begin_src bash -n -r :dir src/ :results output
./ex7-2
echo $?

#+end_src
#+RESULTS: exec_ex7-2
: 42

* Example8

#+name: ex8.asm
#+begin_src asm :tangle src/ex8.asm :mkdirp yes
global _start

_start:
    call func
    mov eax, 1
    mov ebx, 0
    int 0x80

func:
    push ebp
    mov ebp, esp
    sub esp, 2
    mov [esp], byte 'H'
    mov [esp+1], byte 'i'
    mov eax, 4    ; sys_write system call
    mov ebx, 1    ; stdout file descriptor
    mov ecx, esp  ; bytes to write
    mov edx, 2    ; number of bytes to write
    int 0x80      ; perform system call
    mov esp, ebp
    pop ebp
    ret
#+end_src

#+name: compile_ex8.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex8.asm -o ex8.o
        ld -m elf_i386 ex8.o -o ex8
#+end_src

#+name: exec_ex8
#+begin_src bash :dir src/ :results output
./ex8
#+end_src

#+RESULTS: exec_ex8
: Hi

* Example9
  CLOSED: [2019-09-26 四 16:55]
  :LOGBOOK:
  - State "DONE"       from "NEXT"       [2019-09-26 四 16:55]
  :END:

#+name: ex9.asm
#+begin_src asm :tangle src/ex9.asm :mkdirp yes
global _start

_start:
    push 21
    call times2
    mov ebx, eax
    mov eax, 1
    int 0x80

times2:
    push ebp
    mov ebp, esp
    mov eax, [ebp+8]
    add eax, eax
    mov esp, ebp
    pop ebp
    ret
#+end_src

#+name: compile_ex9.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex9.asm -o ex9.o
        ld -m elf_i386 ex9.o -o ex9
#+end_src

#+name: exec_ex9
#+begin_src bash :dir src/ :results output
./ex9
echo $?
#+end_src

#+RESULTS: exec_ex9
: 42
* Example10

#+name: ex10.asm
#+begin_src asm :tangle src/ex10.asm :mkdirp yes
global main

extern printf

section .data
    msg db "Testing %i...", 0x0a, 0x00

main:
    push ebp
    mov ebp, esp
    push 123
    push msg
    call printf
    mov eax, 0
    mov esp, ebp
    pop ebp
    ret
#+end_src

#+name: compile_ex10.asm
#+begin_src bash :dir src/ :results none
        nasm -f elf32 ex10.asm -o ex10.o
        gcc -m32 ex10.o -o ex10
#+end_src

Note: 貌似我沒安裝 32 位元的 gcc，找不到-lgcc

#+name: exec_ex10
#+begin_src bash :dir src/ :results output
./ex10
#+end_src

* Example11

#+name: add42.asm
#+begin_src asm :tangle src/add42.asm :mkdirp yes
global add42

add42:
    push ebp
    mov ebp, esp
    mov eax, [ebp+8]
    add eax, 42
    mov esp, ebp
    pop ebp
    ret
#+end_src

#+name:add42.h
#+begin_src c :tangle src/add42.h :mkdirp yes
// Function that returns x + 42
int add42(int x);
#+end_src

#+name: ex11
#+begin_src c :tangle src/ex11.c :mkdirp yes
#include <stdio.h>
#include "add42.h"

int main() {
    int result;
    result = add42(30);
    printf("Result: %i\n", result);
    return 0;
}
#+end_src

#+name: compile_ex11
#+begin_src bash :dir src/ :results none
        nasm -f elf32 add42.asm -o add42.o
        gcc -m32 add42.o ex11.c -o ex11
#+end_src

#+name: exec_ex11
#+begin_src bash :dir src/ :results output
./ex11
#+end_src

* Hello C, Hello ASM

** NASM code
 #+name: hello_asm.asm
 #+begin_src asm :tangle src/hello_asm.asm :mkdirp yes
     section     .text
     global      hello_asm                              ;must be declared for linker (ld)

     hello_asm:                                                 ;tell linker entry point

             mov     edx,len                             ;message length
             mov     ecx,        msg                     ;message to write
             mov     ebx,1                               ;file descriptor (stdout)
             mov     eax,4                               ;system call number (sys_write)
             int     0x80                                ;call kernel


     section     .data

             msg     db  'Hello, NASM!',0xa                 ;our dear string
             len      equ $ - msg                             ;length of our dear string
 #+end_src
 like [[Hello World][Hello World]], but not exit process.

** NASM code header for C
#+name: NASM_code_header_for_C
#+begin_src c :tangle src/hello_asm.h :mkdirp yes
extern void hello_asm(void);
#+end_src

** C code
#+name: hello_c.c
#+begin_src c :tangle src/hello_c.c :mkdirp yes
#include<stdio.h>
#include<stdlib.h>

void hello_c(){
  printf("Hello, C\n");
}
#+end_src

#+name: hello_c.h
#+begin_src c :tangle src/hello_c.h :mkdirp yes
void hello_c();
#+end_src

** C main code

#+name: hello_main.c
#+begin_src c :tangle src/hello_main.c :mkdirp yes
#include<stdio.h>
#include<stdlib.h>
#include "hello_asm.h"
#include "hello_c.h"
//extern void hello_asm(void);
//extern void hello_c();

int main(void){
  printf("Hello, World\n");
  hello_asm();
  printf("\n");
  hello_c();
  return 0;
}
#+end_src

** Compile

#+begin_src shell
nasm -felf64 hello_asm.asm -o hello_asm.o
gcc -c hello_c.c -o hello_c.o
gcc -no-pie hello_main.c hello_c.o hello_asm.o -o hello
./hello
#+end_src


#+begin_example
Hello, NASM!
Hello, World

Hello, C
#+end_example

* 授權(LICENSE)
  *本筆記除了程式碼部份外，其餘部份採用 CC-3.0 授權。*
#+begin_export html
  <a rel="license" href="http://creativecommons.org/licenses/by/3.0/tw/"><img alt="創用 CC 授權條款" style="border-width:0" src="https://i.creativecommons.org/l/by/3.0/tw/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">又LAG在Linux上的x86組合語言練習(使用NASM)</span>由<a xmlns:cc="http://creativecommons.org/ns#" href="https://www.lagagain.com" property="cc:attributionName" rel="cc:attributionURL"> lagagain(LAG)</a>製作，以<a rel="license" href="http://creativecommons.org/licenses/by/3.0/tw/">創用CC 姓名標示 3.0 台灣 授權條款</a>釋出。
#+end_export
* 後記
  雖然我以前就有 NASM 的基礎，不過以前看的書的範例平台是使用 Windows，也未太過深入了解系統中斷、系統呼叫。這次有比較深入的學習。
** Other
 [[https://youtu.be/Ac4cCEySLUs?list=WL&t=75][他犧牲自己的一生，揭發政府監控人民的真相! | 永久檔案 | 啾讀。第51集 | 啾啾鞋]]

#+name: quot_to_explain_why_study_asm
#+begin_quote
理解一件科技設備，並且當它壞掉的時候以正確的方式檢查，嘗試修復它，是一個人對於科技的最基本的責任，不要隨便敷衍科技。

現在的人東西壞掉就換新的，導致沒人在乎一件設備的運作原理，久了以後就造成人們被科技產品反噬。
#+end_quote
